package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.38

import (
	"context"

	"github.com/PauloRVF/graphql_poc_go/graph/model"
)

// Books is the resolver for the books field.
func (r *authorResolver) Books(ctx context.Context, obj *model.Author) ([]*model.Book, error) {
	books, err := r.BookDB.FindByAuthor(obj.ID)
	if err != nil {
		return nil, err
	}

	var booksModel []*model.Book
	for _, book := range books {
		booksModel = append(booksModel, &model.Book{
			ID:              book.ID,
			PublicationYear: book.PublicationYear,
			Title:           book.Title,
		})
	}

	return booksModel, nil
}

// Author is the resolver for the author field.
func (r *bookResolver) Author(ctx context.Context, obj *model.Book) (*model.Author, error) {
	author, err := r.AuthorDB.FindbyBookID(obj.ID)
	if err != nil {
		return nil, err
	}

	return &model.Author{
		ID:   author.ID,
		Name: author.Name,
	}, nil
}

// CreateAuthor is the resolver for the createAuthor field.
func (r *mutationResolver) CreateAuthor(ctx context.Context, input model.NewAuthor) (*model.Author, error) {
	author, err := r.AuthorDB.Create(input.Name)
	if err != nil {
		return nil, err
	}

	return &model.Author{
		ID:   author.ID,
		Name: author.Name,
	}, nil
}

// CreateBook is the resolver for the createBook field.
func (r *mutationResolver) CreateBook(ctx context.Context, input model.NewBook) (*model.Book, error) {
	book, err := r.BookDB.Create(input.Title, input.AuthorID, input.PublicationYear)
	if err != nil {
		return nil, err
	}

	return &model.Book{
		ID:              book.ID,
		PublicationYear: book.PublicationYear,
		Title:           book.Title,
	}, nil
}

// Authors is the resolver for the authors field.
func (r *queryResolver) Authors(ctx context.Context) ([]*model.Author, error) {
	authors, err := r.AuthorDB.FindAll()
	if err != nil {
		return nil, err
	}

	var authorsModel []*model.Author
	for _, author := range authors {
		authorsModel = append(authorsModel, &model.Author{
			ID:   author.ID,
			Name: author.Name,
		})
	}

	return authorsModel, nil
}

// Books is the resolver for the books field.
func (r *queryResolver) Books(ctx context.Context) ([]*model.Book, error) {
	books, err := r.BookDB.FindAll()
	if err != nil {
		return nil, err
	}

	var booksModel []*model.Book
	for _, book := range books {
		booksModel = append(booksModel, &model.Book{
			ID:              book.ID,
			PublicationYear: book.PublicationYear,
			Title:           book.Title,
		})
	}

	return booksModel, nil
}

// Author returns AuthorResolver implementation.
func (r *Resolver) Author() AuthorResolver { return &authorResolver{r} }

// Book returns BookResolver implementation.
func (r *Resolver) Book() BookResolver { return &bookResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type authorResolver struct{ *Resolver }
type bookResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
